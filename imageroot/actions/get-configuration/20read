#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

#
# Read configuration
#

import os
import sys
import json
import agent
from agent.ldapproxy import Ldapproxy
import subprocess
import time

# Prepare return variable
config = {}

# Read current configuration from the environment file
config["host"] = os.getenv("TRAEFIK_HOST","")
config["configured"] = True if config["host"] else False
config["http_port"] = os.getenv("TRAEFIK_HTTP_PORT", "80")
config["http2https"] = os.getenv("TRAEFIK_HTTP2HTTPS") == "True"
config["lets_encrypt"] = os.getenv("TRAEFIK_LETS_ENCRYPT") == "True"

# retrieve LDAP domains list
lp = Ldapproxy()
domains = []
for key in lp.get_domains_list():
    domains.append({
        "name": key,
        "label": key,
        "value": key,
    })

config['ldap_domain_list'] = domains
config['ldap_domain'] = os.environ.get("LDAP_DOMAIN",'')

# Check if the lemonldapng service is active
command = ["systemctl", "is-active", "--user", "lemonldapng"]
try:
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True, check=True)
    service_status = result.stdout.strip()
except subprocess.CalledProcessError:
    service_status = "inactive"

if service_status != "active":
    # Set default values if the service is not active
    config['cda_status'] = False
    config['saml_status'] = False
else:
    # Wait for the  lemonldapng-app command to succeed (timeout: 30 seconds)
    timeout = 30  # seconds
    interval = 1  # seconds between retries
    elapsed_time = 0

    # Check if lemonldapng-app is running
    while elapsed_time < timeout:
        command = ["systemctl", "is-active", "--user", "lemonldapng-app"]
        try:
            result = subprocess.run(command, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, text=True, check=True)
            output = result.stdout.strip()
            if output == 'active':  # If the command succeeds and returns output, break the loop
                break
        except subprocess.CalledProcessError:
            # Print a message to stderr and wait before retrying
            print("Waiting for lemonldapng-app to become available...", file=sys.stderr)
            time.sleep(interval)
            elapsed_time += interval
            if elapsed_time >= timeout:
                print("Timout is reached. lemonldapng-app is not available.", file=sys.stderr)
                # Exit with an error code   
                sys.exit(1)
    # retrieve the cross domain authentication value
    command = [
        "podman", "exec", "lemonldapng-app",
        "/usr/share/lemonldap-ng/bin/lemonldap-ng-cli", "-yes", "1", "get", "cda"
    ]
    result = subprocess.run(command, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, text=True, check=True)
    output = result.stdout.strip()
    config['cda_status'] = True if output == 'cda = 1' else False

    # retrieve the issuerDBSAMLActivation value
    command = [
        "podman", "exec", "lemonldapng-app",
        "/usr/share/lemonldap-ng/bin/lemonldap-ng-cli", "-yes", "1", "get", "issuerDBSAMLActivation"
    ]
    result = subprocess.run(command, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, text=True, check=True)
    output = result.stdout.strip()
    config['saml_status'] = True if output == 'issuerDBSAMLActivation = 1' else False

# Dump the configuration to stdout
json.dump(config, fp=sys.stdout)
