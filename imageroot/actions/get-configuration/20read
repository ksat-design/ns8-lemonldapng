#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

#
# Read configuration
#

import os
import sys
import json
import agent
from agent.ldapproxy import Ldapproxy
import subprocess
import time

# Prepare return variable
config = {}

# Read current configuration from the environment file
config["host"] = os.getenv("TRAEFIK_HOST", "")
config["configured"] = True if config["host"] else False
config["http_port"] = os.getenv("TRAEFIK_HTTP_PORT", "80")
config["http2https"] = os.getenv("TRAEFIK_HTTP2HTTPS") == "True"
config["lets_encrypt"] = os.getenv("TRAEFIK_LETS_ENCRYPT") == "True"
config["sample_apps_status"] = os.getenv("SAMPLE_APPS_STATUS", "True") == "True"

# retrieve LDAP domains list
lp = Ldapproxy()
domains = []
for key in lp.get_domains_list():
    domains.append({
        "name": key,
        "label": key,
        "value": key,
    })

config['ldap_domain_list'] = domains
config['ldap_domain'] = os.environ.get("LDAP_DOMAIN", '')

# Check if the lemonldapng service is active
command = ["systemctl", "is-active", "--user", "lemonldapng"]
try:
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True, check=True)
    service_status = result.stdout.strip()
except subprocess.CalledProcessError:
    service_status = "inactive"

if service_status != "active":
    # Set default values if the service is not active
    config['cda_status'] = False
    config['saml_status'] = False
    config['sample_apps_status'] = False
else:
    # Wait for the lemonldapng-app command to succeed (timeout: 60 seconds)
    timeout = 60
    interval = 1
    elapsed_time = 0

    while elapsed_time < timeout:
        command = ["systemctl", "is-active", "--user", "lemonldapng-app"]
        try:
            result = subprocess.run(command, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, text=True, check=True)
            if result.stdout.strip() == 'active':
                break
        except subprocess.CalledProcessError:
            print("Waiting for lemonldapng-app to become available...", file=sys.stderr)
            time.sleep(interval)
            elapsed_time += interval
            if elapsed_time >= timeout:
                print("Timeout is reached. lemonldapng-app is not available.", file=sys.stderr)
                sys.exit(1)

    # CDA status
    try:
        result = subprocess.run(
            ["podman", "exec", "lemonldapng-app", "/usr/share/lemonldap-ng/bin/lemonldap-ng-cli", "-yes", "1", "get", "cda"],
            stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, text=True, check=True
        )
        config['cda_status'] = result.stdout.strip() == 'cda = 1'
    except subprocess.CalledProcessError:
        print("Error retrieving CDA status", file=sys.stderr)

    # SAML status
    try:
        result = subprocess.run(
            ["podman", "exec", "lemonldapng-app", "/usr/share/lemonldap-ng/bin/lemonldap-ng-cli", "-yes", "1", "get", "issuerDBSAMLActivation"],
            stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, text=True, check=True
        )
        config['saml_status'] = result.stdout.strip() == 'issuerDBSAMLActivation = 1'
    except subprocess.CalledProcessError:
        print("Error retrieving SAML status", file=sys.stderr)

    # Sample Apps status
    try:
        result = subprocess.run(
            "podman exec lemonldapng-app /usr/share/lemonldap-ng/bin/lemonldap-ng-cli -yes 1 get 'applicationList/1sample/catname' | grep -q 'Sample applications' && echo 'true' || echo 'false'",
            shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True
        )
        sample_apps_status = result.stdout.strip().lower() == 'true'

        # Only write "True" to env to preserve user intent
        if sample_apps_status:
            agent.set_env("SAMPLE_APPS_STATUS", "True")

        config['sample_apps_status'] = os.getenv("SAMPLE_APPS_STATUS", "True") == "True"

    except subprocess.CalledProcessError:
        print("Error retrieving Sample Apps status", file=sys.stderr)

# Output the configuration
json.dump(config, fp=sys.stdout)
